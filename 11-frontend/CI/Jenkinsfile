pipeline {
    agent {
        label 'agent-1-label' 
    }

    environment {
        project = 'roboshop'
        env_name = 'dev'
        tier = 'web'
        component = 'fronend'
        acc_id = '343430925817'
        region = 'us-east-1'
        label = 'agent-1-label'
        namespace = 'roboshop'
        appversion = ''
    }

    options {
        ansiColor('xtrem') 
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        timestamps()        
    }

    parameters {
        string(name: 'SNOW_CR', defaultValue: '', description: 'Please provide the change request number')

        choice(name: 'environment', choices: ['dev', 'nonprod', 'qa', 'prd'], description: 'please select the environment')
        
        booleanParam(name: 'build_image', defaultValue: false, description: 'please check the box to build the image')

        booleanParm(name: 'deploy', defaultValue: false, description: 'please check the box to deploy')
    }

    stages {
        stage('Read the Version') {
            steps {
                dir('11-frontend/CI') {
                    script {
                        def packagejson = readJSON file: 'code/package.json'
                        appversion = packagejson.version
                        echo "app version is ::: ${appversion}"
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    sh """
                        echo "Unit tests are created by developers, we will configure the command like npm test"
                    """
                }
            }
        }

        stage('Sonar Qube') {
            environment {
                SCANNER_HOME = tool 'sonar-7.0'
            }

            steps {
                withSonarQubeEnv('sonar-7.0')
                dir('11-frontend/CI') {
                    sh """
                        $SCANNER_HONE/bin/sonar-scanner
                    """
                }
            }

        }

        stage('Quality Gate') {
            steps {
                timeout(time: 6, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('Build Image') {
            when {
                expression {
                    params.build_image
                }
            }
            steps {
                dir('11-frontend/CI') {
                    script {
                        withAWS(region: 'us-east-1', credentials: 'aws-auth') {
                            sh """
                                aws ecr get-login-paasword --region ${region} | --username AWS --password-stdin ${acc_id}.dkr.ecr.${region}.amazonaws.com

                                docker build -t ${acc_id}.dkr.ecr.${region}.amazonaws.com/${project}-${params.environment}/${component}:${appversion} .

                                docker push ${acc_id}.dkr.ecr.${region}.amazonaws.com/${project}-${params.environment}/${component}:${appversion}

                            """
                        }
                    }
                }
            }
        }

        stage('Trigger job') {
            when {
                expression {
                    params.deploy
                }
            }
            steps {
                script {
                    build job: "${component}-CD", parameters: [string(name: 'image_version', value: "${appversion}"), string(name: 'Deploy_to', value: 'dev')]
                }
            }
        }
    }

}