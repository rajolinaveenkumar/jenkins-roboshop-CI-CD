pipeline {
    agent {
        label 'agent-1-label'
    }

     environment {
        project = 'roboshop'
        env_name = 'dev'
        tier = 'database'
        component = 'redis'
        acc_id = '343430925817'
        region = 'us-east-1'
        label = 'agent-1-label'
        namespace = 'roboshop'
    }

    options {
        ansiColor('xtrem')
        timeout(time: 40, unit: 'MINUTES')
        disableConcurrentBuilds()
        timestamps()
    }

    parameters {
        string(name: 'image_version', defaultValue: '', description: 'please provide the image version')
        choice(name: 'Deploy_to', choices: ['staging', 'dev', 'qa', 'prod'], description: 'please choose the environment to deploy')
    }

    stages {
        stage('Deploy') {
            steps {
                script {
                    withAWS(region: 'us-east-1', credentails: 'aws-auth') {
                        try {
                            sh """
                                echo "Setting kube config"
                                aws eks update-kubeconfig --region ${region} --name ${project}-${env_name}-eks

                                echo "Checking cluster nodes"
                                kubectl get nodes

                                cd 02-redis/CD/redis-helm
                                pwd

                                echo "Preparing Helm Deployments"
                                sed -i "s/IMAGE_VERSION/${params.image_version}/g" values-${params.Deploy_to}.yaml

                                echo "Deploying new version with helm"
                                helm upgrade --install ${component}-chart -n ${namespace} -f values-${params.Deploy_to}.yaml .


                            """        
                        }

                        catch (err) {
                            echo "Helm upgrade failed. Rollback to Previous version "

                            sh """ 
                                echo "Rollback the Previous version"
                                helm rollback ${component}-chart -n ${namespace}
                                sleep 30 # wait for pods to stabilize
                            """

                            // check the rollout status after rollback

                            def rolloutStatus = sh (
                                script: "kubectl rollout status deployment/${component} -n ${namespace} || echo FAILED",
                                returnStdout: true
                            ).trim()

                            if (rolloutStatus.contains("successfully rolled out")) {
                                echo "Rollback to previous version successfull"
                                error "New deployment is failed and rolled back to previous version"
                            
                            } else {
                                error "New deployment is failed and rollback also failed"
                            }

                        }
                    }
                }
            }
        }

        stage('Functional/API Tests') {
            when{
                expression { params.environment == 'dev'}
            }
            
            steps {
                script{
                    
                        sh """
                            echo "functional tests will be performed after DEV deployment. Usual;y these are automated selenium test cases written by testing team. If these test cases are failed pipeline also fails"
                        """
                    
                }
            }
        }

        stage('Integration Tests') {
            when{
                expression { params.deploy_to == 'qa'}
            }
            
            steps {
                script{
                    
                        sh """
                            echo "integrations tests will be performed after QA/UAT deployment. Usually these are automated BDD(Behaviour driven development) test cases in cucumber framework written by testing team. If these test cases are failed pipeline also fails"
                        """
                    
                }
            }
        }
        
    }

    post {
        always {
            echo "this run always"
            deleteDir()
        }

        success {
            echo "This runs only when success"
        }

        failure {
            echo "This runs only when failure"
        }
    }


}